"""
Base Agent for CivicMind Framework
=================================

Base class for all civic agents providing common functionality.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from datetime import datetime

from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.tools import BaseTool


@dataclass
class AgentResponse:
    """Response from a civic agent"""
    recommendations: List[str]
    contacts: List[Dict[str, str]]
    documents: List[str]
    next_steps: List[str]
    confidence: float
    reasoning: str
    community_first: bool = True


class BaseCivicAgent(ABC):
    """
    Base class for all civic agents in the CivicMind framework
    """
    
    def __init__(self, llm, tools: Optional[List[BaseTool]] = None):
        self.llm = llm
        self.tools = tools or []
        self.agent_type = self.__class__.__name__.lower().replace('agent', '')
        
    @abstractmethod
    def get_system_prompt(self) -> str:
        """Return the system prompt for this agent"""
        pass
    
    @abstractmethod
    def analyze_issue(self, issue_description: str, location: str, 
                     context: Dict[str, Any]) -> AgentResponse:
        """Analyze a civic issue and provide recommendations"""
        pass
    
    def _create_system_message(self) -> SystemMessage:
        """Create the system message with agent-specific prompt"""
        return SystemMessage(content=self.get_system_prompt())
    
    def _format_response(self, raw_response: str) -> AgentResponse:
        """Format the LLM response into structured AgentResponse"""
        # This is a basic implementation - each agent can override
        lines = [line.strip() for line in raw_response.split('\n') 
                if line.strip()]
        
        recommendations = []
        contacts = []
        documents = []
        next_steps = []
        
        current_section = None
        
        for line in lines:
            if line.lower().startswith('recommendations:'):
                current_section = 'recommendations'
            elif line.lower().startswith('contacts:'):
                current_section = 'contacts'
            elif line.lower().startswith('documents:'):
                current_section = 'documents'
            elif line.lower().startswith('next steps:'):
                current_section = 'next_steps'
            elif line.startswith('- ') or line.startswith('â€¢ '):
                item = line[2:].strip()
                if current_section == 'recommendations':
                    recommendations.append(item)
                elif current_section == 'contacts':
                    contacts.append({"name": item, "type": "department"})
                elif current_section == 'documents':
                    documents.append(item)
                elif current_section == 'next_steps':
                    next_steps.append(item)
        
        return AgentResponse(
            recommendations=recommendations,
            contacts=contacts,
            documents=documents,
            next_steps=next_steps,
            confidence=0.8,  # Default confidence
            reasoning="Generated by civic agent",
            community_first=True
        )
    
    def get_common_civic_context(self, location: str) -> str:
        """Get common civic context for the location"""
        return f"""
        Location: {location}
        
        General Civic Principles:
        1. Try community solutions first when appropriate
        2. Respect cultural and religious diversity
        3. Follow local laws and ordinances
        4. Promote neighborly resolution when possible
        5. Escalate to authorities when community solutions fail
        6. Provide clear, actionable guidance
        7. Consider accessibility and language needs
        """
